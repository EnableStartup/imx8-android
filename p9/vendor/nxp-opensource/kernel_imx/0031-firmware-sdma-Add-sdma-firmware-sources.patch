From 969732051a0580b391a867ebc53f4438d828f4f7 Mon Sep 17 00:00:00 2001
From: Valentin Raevsky <valentin@compulab.co.il>
Date: Mon, 18 Mar 2019 15:02:13 +0200
Subject: [PATCH 31/39] firmware: sdma: Add sdma firmware sources

Signed-off-by: Valentin Raevsky <valentin@compulab.co.il>
---
 firmware/Makefile                     | 184 +++++++++++++++++++++-
 firmware/ihex2fw.c                    | 281 ++++++++++++++++++++++++++++++++++
 firmware/imx/sdma/sdma-imx6q.bin.ihex | 139 +++++++++++++++++
 firmware/imx/sdma/sdma-imx7d.bin.ihex | 169 ++++++++++++++++++++
 4 files changed, 768 insertions(+), 5 deletions(-)
 create mode 100644 firmware/ihex2fw.c
 create mode 100755 firmware/imx/sdma/sdma-imx6q.bin.ihex
 create mode 100644 firmware/imx/sdma/sdma-imx7d.bin.ihex

diff --git a/firmware/Makefile b/firmware/Makefile
index 168094a3fae7..ee4c05c918c7 100644
--- a/firmware/Makefile
+++ b/firmware/Makefile
@@ -1,4 +1,3 @@
-# SPDX-License-Identifier: GPL-2.0
 #
 # kbuild file for firmware/
 #
@@ -10,6 +9,145 @@ fwabs := $(addprefix $(srctree)/,$(filter-out /%,$(fwdir)))$(filter /%,$(fwdir))
 
 fw-external-y := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE))
 
+# There are three cases to care about:
+# 1. Building kernel with CONFIG_FIRMWARE_IN_KERNEL=y -- $(fw-shipped-y) should
+#    include the firmware files to include, according to .config
+# 2. 'make modules_install', which will install firmware for modules, and 
+#    _also_ for the in-kernel drivers when CONFIG_FIRMWARE_IN_KERNEL=n
+# 3. 'make firmware_install', which installs all firmware, unconditionally.
+
+# For the former two cases we want $(fw-shipped-y) and $(fw-shipped-m) to be
+# accurate. In the latter case it doesn't matter -- it'll use $(fw-shipped-all).
+# But be aware that the config file might not be included at all.
+
+ifdef CONFIG_ACENIC_OMIT_TIGON_I
+acenic-objs := acenic/tg2.bin
+fw-shipped- += acenic/tg1.bin
+else
+acenic-objs := acenic/tg1.bin acenic/tg2.bin
+endif
+fw-shipped-$(CONFIG_ACENIC) += $(acenic-objs)
+fw-shipped-$(CONFIG_ADAPTEC_STARFIRE) += adaptec/starfire_rx.bin \
+					 adaptec/starfire_tx.bin
+fw-shipped-$(CONFIG_ATARI_DSP56K) += dsp56k/bootstrap.bin
+fw-shipped-$(CONFIG_ATM_AMBASSADOR) += atmsar11.fw
+fw-shipped-$(CONFIG_BNX2X) += bnx2x/bnx2x-e1-6.2.9.0.fw \
+			      bnx2x/bnx2x-e1h-6.2.9.0.fw \
+			      bnx2x/bnx2x-e2-6.2.9.0.fw
+fw-shipped-$(CONFIG_BNX2) += bnx2/bnx2-mips-09-6.2.1a.fw \
+			     bnx2/bnx2-rv2p-09-6.0.17.fw \
+			     bnx2/bnx2-rv2p-09ax-6.0.17.fw \
+			     bnx2/bnx2-mips-06-6.2.1.fw \
+			     bnx2/bnx2-rv2p-06-6.0.15.fw
+fw-shipped-$(CONFIG_CASSINI) += sun/cassini.bin
+fw-shipped-$(CONFIG_CHELSIO_T3) += cxgb3/t3b_psram-1.1.0.bin \
+				   cxgb3/t3c_psram-1.1.0.bin \
+				   cxgb3/ael2005_opt_edc.bin \
+				   cxgb3/ael2005_twx_edc.bin \
+				   cxgb3/ael2020_twx_edc.bin
+fw-shipped-$(CONFIG_DRM_MGA) += matrox/g200_warp.fw matrox/g400_warp.fw
+fw-shipped-$(CONFIG_DRM_R128) += r128/r128_cce.bin
+fw-shipped-$(CONFIG_DRM_RADEON) += radeon/R100_cp.bin radeon/R200_cp.bin \
+				   radeon/R300_cp.bin radeon/R420_cp.bin \
+				   radeon/RS690_cp.bin radeon/RS600_cp.bin \
+				   radeon/R520_cp.bin \
+				   radeon/R600_pfp.bin radeon/R600_me.bin \
+				   radeon/RV610_pfp.bin radeon/RV610_me.bin \
+				   radeon/RV630_pfp.bin radeon/RV630_me.bin \
+				   radeon/RV620_pfp.bin radeon/RV620_me.bin \
+				   radeon/RV635_pfp.bin radeon/RV635_me.bin \
+				   radeon/RV670_pfp.bin radeon/RV670_me.bin \
+				   radeon/RS780_pfp.bin radeon/RS780_me.bin \
+				   radeon/RV770_pfp.bin radeon/RV770_me.bin \
+				   radeon/RV730_pfp.bin radeon/RV730_me.bin \
+				   radeon/RV710_pfp.bin radeon/RV710_me.bin
+fw-shipped-$(CONFIG_IMX_SDMA) += imx/sdma/sdma-imx6q.bin imx/sdma/sdma-imx7d.bin
+fw-shipped-$(CONFIG_DVB_AV7110) += av7110/bootcode.bin
+fw-shipped-$(CONFIG_DVB_TTUSB_BUDGET) += ttusb-budget/dspbootcode.bin
+fw-shipped-$(CONFIG_E100) += e100/d101m_ucode.bin e100/d101s_ucode.bin \
+			     e100/d102e_ucode.bin
+fw-shipped-$(CONFIG_MYRI_SBUS) += myricom/lanai.bin
+fw-shipped-$(CONFIG_PCMCIA_PCNET) += cis/LA-PCM.cis cis/PCMLM28.cis \
+				     cis/DP83903.cis cis/NE2K.cis \
+				     cis/tamarack.cis cis/PE-200.cis \
+				     cis/PE520.cis
+fw-shipped-$(CONFIG_PCMCIA_3C589) += cis/3CXEM556.cis
+fw-shipped-$(CONFIG_PCMCIA_3C574) += cis/3CCFEM556.cis
+fw-shipped-$(CONFIG_SERIAL_8250_CS) += cis/MT5634ZLX.cis cis/RS-COM-2P.cis \
+				       cis/COMpad2.cis cis/COMpad4.cis \
+				       cis/SW_555_SER.cis cis/SW_7xx_SER.cis \
+				       cis/SW_8xx_SER.cis
+fw-shipped-$(CONFIG_PCMCIA_SMC91C92) += ositech/Xilinx7OD.bin
+fw-shipped-$(CONFIG_SCSI_ADVANSYS) += advansys/mcode.bin advansys/38C1600.bin \
+				      advansys/3550.bin advansys/38C0800.bin
+fw-shipped-$(CONFIG_SCSI_QLOGIC_1280) += qlogic/1040.bin qlogic/1280.bin \
+					 qlogic/12160.bin
+fw-shipped-$(CONFIG_SCSI_QLOGICPTI) += qlogic/isp1000.bin
+fw-shipped-$(CONFIG_INFINIBAND_QIB) += qlogic/sd7220.fw
+fw-shipped-$(CONFIG_SND_KORG1212) += korg/k1212.dsp
+fw-shipped-$(CONFIG_SND_MAESTRO3) += ess/maestro3_assp_kernel.fw \
+				     ess/maestro3_assp_minisrc.fw
+fw-shipped-$(CONFIG_SND_SB16_CSP) += sb16/mulaw_main.csp sb16/alaw_main.csp \
+				     sb16/ima_adpcm_init.csp \
+				     sb16/ima_adpcm_playback.csp \
+				     sb16/ima_adpcm_capture.csp
+fw-shipped-$(CONFIG_SND_YMFPCI) += yamaha/ds1_ctrl.fw yamaha/ds1_dsp.fw \
+				   yamaha/ds1e_ctrl.fw
+fw-shipped-$(CONFIG_SND_WAVEFRONT) += yamaha/yss225_registers.bin
+fw-shipped-$(CONFIG_TEHUTI) += tehuti/bdx.bin
+fw-shipped-$(CONFIG_TIGON3) += tigon/tg3.bin tigon/tg3_tso.bin \
+			       tigon/tg3_tso5.bin
+fw-shipped-$(CONFIG_TYPHOON) += 3com/typhoon.bin
+fw-shipped-$(CONFIG_USB_EMI26) += emi26/loader.fw emi26/firmware.fw \
+				  emi26/bitstream.fw
+fw-shipped-$(CONFIG_USB_EMI62) += emi62/loader.fw emi62/bitstream.fw \
+				  emi62/spdif.fw emi62/midi.fw
+fw-shipped-$(CONFIG_USB_KAWETH) += kaweth/new_code.bin kaweth/trigger_code.bin \
+				   kaweth/new_code_fix.bin \
+				   kaweth/trigger_code_fix.bin
+ifdef CONFIG_FIRMWARE_IN_KERNEL
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_MPR) += keyspan/mpr.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA18X) += keyspan/usa18x.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA19) += keyspan/usa19.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA19QI) += keyspan/usa19qi.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA19QW) += keyspan/usa19qw.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA19W) += keyspan/usa19w.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA28) += keyspan/usa28.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA28XA) += keyspan/usa28xa.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA28XB) += keyspan/usa28xb.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA28X) += keyspan/usa28x.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA49W) += keyspan/usa49w.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_USA49WLC) += keyspan/usa49wlc.fw
+else
+fw-shipped- += keyspan/mpr.fw keyspan/usa18x.fw keyspan/usa19.fw	\
+	keyspan/usa19qi.fw keyspan/usa19qw.fw keyspan/usa19w.fw		\
+	keyspan/usa28.fw keyspan/usa28xa.fw keyspan/usa28xb.fw		\
+	keyspan/usa28x.fw keyspan/usa49w.fw keyspan/usa49wlc.fw
+endif
+fw-shipped-$(CONFIG_USB_SERIAL_TI) += ti_3410.fw ti_5052.fw \
+				      mts_cdma.fw mts_gsm.fw mts_edge.fw
+fw-shipped-$(CONFIG_USB_SERIAL_EDGEPORT) += edgeport/boot.fw edgeport/boot2.fw \
+					    edgeport/down.fw edgeport/down2.fw
+fw-shipped-$(CONFIG_USB_SERIAL_EDGEPORT_TI) += edgeport/down3.bin
+fw-shipped-$(CONFIG_USB_SERIAL_WHITEHEAT) += whiteheat_loader.fw whiteheat.fw \
+					   # whiteheat_loader_debug.fw
+fw-shipped-$(CONFIG_USB_SERIAL_KEYSPAN_PDA) += keyspan_pda/keyspan_pda.fw
+fw-shipped-$(CONFIG_USB_SERIAL_XIRCOM) += keyspan_pda/xircom_pgs.fw
+fw-shipped-$(CONFIG_USB_VICAM) += vicam/firmware.fw
+fw-shipped-$(CONFIG_VIDEO_CPIA2) += cpia2/stv0672_vp4.bin
+fw-shipped-$(CONFIG_YAM) += yam/1200.bin yam/9600.bin
+
+fw-shipped-all := $(fw-shipped-y) $(fw-shipped-m) $(fw-shipped-)
+
+quiet_cmd_ihex  = IHEX    $@
+      cmd_ihex  = $(OBJCOPY) -Iihex -Obinary $< $@
+
+quiet_cmd_ihex2fw  = IHEX2FW $@
+      cmd_ihex2fw  = $(objtree)/$(obj)/ihex2fw $< $@
+
+quiet_cmd_h16tofw  = H16TOFW $@
+      cmd_h16tofw  = $(objtree)/$(obj)/ihex2fw -w $< $@
+
 quiet_cmd_fwbin = MK_FW   $@
       cmd_fwbin = FWNAME="$(patsubst firmware/%.gen.S,%,$@)";		     \
 		  FWSTR="$(subst /,_,$(subst .,_,$(subst -,_,$(patsubst	     \
@@ -39,17 +177,48 @@ quiet_cmd_fwbin = MK_FW   $@
 wordsize_deps := $(wildcard include/config/64bit.h include/config/32bit.h \
 		include/config/ppc32.h include/config/ppc64.h \
 		include/config/superh32.h include/config/superh64.h \
-		include/config/x86_32.h include/config/x86_64.h \
-		firmware/Makefile)
+		include/config/x86_32.h include/config/x86_64.h)
 
+$(patsubst %,$(obj)/%.gen.S, $(fw-shipped-y)): %: $(wordsize_deps)
+	$(call cmd,fwbin,$(patsubst %.gen.S,%,$@))
 $(patsubst %,$(obj)/%.gen.S, $(fw-external-y)): %: $(wordsize_deps) \
 		include/config/extra/firmware/dir.h
 	$(call cmd,fwbin,$(fwabs)/$(patsubst $(obj)/%.gen.S,%,$@))
 
 # The .o files depend on the binaries directly; the .S files don't.
+$(patsubst %,$(obj)/%.gen.o, $(fw-shipped-y)): %.gen.o: %
 $(patsubst %,$(obj)/%.gen.o, $(fw-external-y)): $(obj)/%.gen.o: $(fwdir)/%
 
+# .ihex is used just as a simple way to hold binary files in a source tree
+# where binaries are frowned upon. They are directly converted with objcopy.
+$(obj)/%: $(obj)/%.ihex
+	$(call cmd,ihex)
+
+# Don't depend on ihex2fw if we're installing and it already exists.
+# Putting it after | in the dependencies doesn't seem sufficient when
+# we're installing after a cross-compile, because ihex2fw has dependencies
+# on stuff like /usr/lib/gcc/ppc64-redhat-linux/4.3.0/include/stddef.h and 
+# thus wants to be rebuilt. Which it can't be, if the prebuilt kernel tree
+# is exported read-only for someone to run 'make install'.
+ifeq ($(INSTALL):$(wildcard $(obj)/ihex2fw),install:$(obj)/ihex2fw)
+ihex2fw_dep :=
+else
+ihex2fw_dep := $(obj)/ihex2fw
+endif
+
+# .HEX is also Intel HEX, but where the offset and length in each record
+# is actually meaningful, because the firmware has to be loaded in a certain
+# order rather than as a single binary blob. Thus, we convert them into our
+# more compact binary representation of ihex records (<linux/ihex.h>)
+$(obj)/%.fw: $(obj)/%.HEX $(ihex2fw_dep)
+	$(call cmd,ihex2fw)
+
+# .H16 is our own modified form of Intel HEX, with 16-bit length for records.
+$(obj)/%.fw: $(obj)/%.H16 $(ihex2fw_dep)
+	$(call cmd,h16tofw)
+
 obj-y				 += $(patsubst %,%.gen.o, $(fw-external-y))
+obj-$(CONFIG_FIRMWARE_IN_KERNEL) += $(patsubst %,%.gen.o, $(fw-shipped-y))
 
 ifeq ($(KBUILD_SRC),)
 # Makefile.build only creates subdirectories for O= builds, but external
@@ -57,8 +226,13 @@ ifeq ($(KBUILD_SRC),)
 _dummy := $(foreach d,$(addprefix $(obj)/,$(dir $(fw-external-y))), $(shell [ -d $(d) ] || mkdir -p $(d)))
 endif
 
-targets := $(patsubst $(obj)/%,%, \
-                                $(shell find $(obj) -name \*.gen.S 2>/dev/null))
+# Remove .S files and binaries created from ihex
+# (during 'make clean' .config isn't included so they're all in $(fw-shipped-))
+targets := $(fw-shipped-) $(patsubst $(obj)/%,%, \
+				$(shell find $(obj) -name \*.gen.S 2>/dev/null))
+
 # Without this, built-in.o won't be created when it's empty, and the
 # final vmlinux link will fail.
 obj- := dummy
+
+hostprogs-y := ihex2fw
diff --git a/firmware/ihex2fw.c b/firmware/ihex2fw.c
new file mode 100644
index 000000000000..08d90e25abf0
--- /dev/null
+++ b/firmware/ihex2fw.c
@@ -0,0 +1,281 @@
+/*
+ * Parser/loader for IHEX formatted data.
+ *
+ * Copyright © 2008 David Woodhouse <dwmw2@infradead.org>
+ * Copyright © 2005 Jan Harkes <jaharkes@cs.cmu.edu>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <stdint.h>
+#include <arpa/inet.h>
+#include <stdio.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/mman.h>
+#include <fcntl.h>
+#include <string.h>
+#include <unistd.h>
+#include <stdlib.h>
+#define _GNU_SOURCE
+#include <getopt.h>
+
+
+struct ihex_binrec {
+	struct ihex_binrec *next; /* not part of the real data structure */
+        uint32_t addr;
+        uint16_t len;
+        uint8_t data[];
+};
+
+/**
+ * nybble/hex are little helpers to parse hexadecimal numbers to a byte value
+ **/
+static uint8_t nybble(const uint8_t n)
+{
+       if      (n >= '0' && n <= '9') return n - '0';
+       else if (n >= 'A' && n <= 'F') return n - ('A' - 10);
+       else if (n >= 'a' && n <= 'f') return n - ('a' - 10);
+       return 0;
+}
+
+static uint8_t hex(const uint8_t *data, uint8_t *crc)
+{
+       uint8_t val = (nybble(data[0]) << 4) | nybble(data[1]);
+       *crc += val;
+       return val;
+}
+
+static int process_ihex(uint8_t *data, ssize_t size);
+static void file_record(struct ihex_binrec *record);
+static int output_records(int outfd);
+
+static int sort_records = 0;
+static int wide_records = 0;
+static int include_jump = 0;
+
+static int usage(void)
+{
+	fprintf(stderr, "ihex2fw: Convert ihex files into binary "
+		"representation for use by Linux kernel\n");
+	fprintf(stderr, "usage: ihex2fw [<options>] <src.HEX> <dst.fw>\n");
+	fprintf(stderr, "       -w: wide records (16-bit length)\n");
+	fprintf(stderr, "       -s: sort records by address\n");
+	fprintf(stderr, "       -j: include records for CS:IP/EIP address\n");
+	return 1;
+}
+
+int main(int argc, char **argv)
+{
+	int infd, outfd;
+	struct stat st;
+	uint8_t *data;
+	int opt;
+
+	while ((opt = getopt(argc, argv, "wsj")) != -1) {
+		switch (opt) {
+		case 'w':
+			wide_records = 1;
+			break;
+		case 's':
+			sort_records = 1;
+			break;
+		case 'j':
+			include_jump = 1;
+			break;
+		default:
+			return usage();
+		}
+	}
+
+	if (optind + 2 != argc)
+		return usage();
+
+	if (!strcmp(argv[optind], "-"))
+	    infd = 0;
+	else
+		infd = open(argv[optind], O_RDONLY);
+	if (infd == -1) {
+		fprintf(stderr, "Failed to open source file: %s",
+			strerror(errno));
+		return usage();
+	}
+	if (fstat(infd, &st)) {
+		perror("stat");
+		return 1;
+	}
+	data = mmap(NULL, st.st_size, PROT_READ, MAP_SHARED, infd, 0);
+	if (data == MAP_FAILED) {
+		perror("mmap");
+		return 1;
+	}
+
+	if (!strcmp(argv[optind+1], "-"))
+	    outfd = 1;
+	else
+		outfd = open(argv[optind+1], O_TRUNC|O_CREAT|O_WRONLY, 0644);
+	if (outfd == -1) {
+		fprintf(stderr, "Failed to open destination file: %s",
+			strerror(errno));
+		return usage();
+	}
+	if (process_ihex(data, st.st_size))
+		return 1;
+
+	return output_records(outfd);
+}
+
+static int process_ihex(uint8_t *data, ssize_t size)
+{
+	struct ihex_binrec *record;
+	uint32_t offset = 0;
+	uint32_t data32;
+	uint8_t type, crc = 0, crcbyte = 0;
+	int i, j;
+	int line = 1;
+	int len;
+
+	i = 0;
+next_record:
+	/* search for the start of record character */
+	while (i < size) {
+		if (data[i] == '\n') line++;
+		if (data[i++] == ':') break;
+	}
+
+	/* Minimum record length would be about 10 characters */
+	if (i + 10 > size) {
+		fprintf(stderr, "Can't find valid record at line %d\n", line);
+		return -EINVAL;
+	}
+
+	len = hex(data + i, &crc); i += 2;
+	if (wide_records) {
+		len <<= 8;
+		len += hex(data + i, &crc); i += 2;
+	}
+	record = malloc((sizeof (*record) + len + 3) & ~3);
+	if (!record) {
+		fprintf(stderr, "out of memory for records\n");
+		return -ENOMEM;
+	}
+	memset(record, 0, (sizeof(*record) + len + 3) & ~3);
+	record->len = len;
+
+	/* now check if we have enough data to read everything */
+	if (i + 8 + (record->len * 2) > size) {
+		fprintf(stderr, "Not enough data to read complete record at line %d\n",
+			line);
+		return -EINVAL;
+	}
+
+	record->addr  = hex(data + i, &crc) << 8; i += 2;
+	record->addr |= hex(data + i, &crc); i += 2;
+	type = hex(data + i, &crc); i += 2;
+
+	for (j = 0; j < record->len; j++, i += 2)
+		record->data[j] = hex(data + i, &crc);
+
+	/* check CRC */
+	crcbyte = hex(data + i, &crc); i += 2;
+	if (crc != 0) {
+		fprintf(stderr, "CRC failure at line %d: got 0x%X, expected 0x%X\n",
+			line, crcbyte, (unsigned char)(crcbyte-crc));
+		return -EINVAL;
+	}
+
+	/* Done reading the record */
+	switch (type) {
+	case 0:
+		/* old style EOF record? */
+		if (!record->len)
+			break;
+
+		record->addr += offset;
+		file_record(record);
+		goto next_record;
+
+	case 1: /* End-Of-File Record */
+		if (record->addr || record->len) {
+			fprintf(stderr, "Bad EOF record (type 01) format at line %d",
+				line);
+			return -EINVAL;
+		}
+		break;
+
+	case 2: /* Extended Segment Address Record (HEX86) */
+	case 4: /* Extended Linear Address Record (HEX386) */
+		if (record->addr || record->len != 2) {
+			fprintf(stderr, "Bad HEX86/HEX386 record (type %02X) at line %d\n",
+				type, line);
+			return -EINVAL;
+		}
+
+		/* We shouldn't really be using the offset for HEX86 because
+		 * the wraparound case is specified quite differently. */
+		offset = record->data[0] << 8 | record->data[1];
+		offset <<= (type == 2 ? 4 : 16);
+		goto next_record;
+
+	case 3: /* Start Segment Address Record */
+	case 5: /* Start Linear Address Record */
+		if (record->addr || record->len != 4) {
+			fprintf(stderr, "Bad Start Address record (type %02X) at line %d\n",
+				type, line);
+			return -EINVAL;
+		}
+
+		memcpy(&data32, &record->data[0], sizeof(data32));
+		data32 = htonl(data32);
+		memcpy(&record->data[0], &data32, sizeof(data32));
+
+		/* These records contain the CS/IP or EIP where execution
+		 * starts. If requested output this as a record. */
+		if (include_jump)
+			file_record(record);
+		goto next_record;
+
+	default:
+		fprintf(stderr, "Unknown record (type %02X)\n", type);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static struct ihex_binrec *records;
+
+static void file_record(struct ihex_binrec *record)
+{
+	struct ihex_binrec **p = &records;
+
+	while ((*p) && (!sort_records || (*p)->addr < record->addr))
+		p = &((*p)->next);
+
+	record->next = *p;
+	*p = record;
+}
+
+static int output_records(int outfd)
+{
+	unsigned char zeroes[6] = {0, 0, 0, 0, 0, 0};
+	struct ihex_binrec *p = records;
+
+	while (p) {
+		uint16_t writelen = (p->len + 9) & ~3;
+
+		p->addr = htonl(p->addr);
+		p->len = htons(p->len);
+		if (write(outfd, &p->addr, writelen) != writelen)
+			return 1;
+		p = p->next;
+	}
+	/* EOF record is zero length, since we don't bother to represent
+	   the type field in the binary version */
+	if (write(outfd, zeroes, 6) != 6)
+		return 1;
+	return 0;
+}
diff --git a/firmware/imx/sdma/sdma-imx6q.bin.ihex b/firmware/imx/sdma/sdma-imx6q.bin.ihex
new file mode 100755
index 000000000000..ba5da62ce733
--- /dev/null
+++ b/firmware/imx/sdma/sdma-imx6q.bin.ihex
@@ -0,0 +1,139 @@
+:1000000053444D4103000000030000001C000000A9
+:1000100029000000C0000000D40700008202000098
+:10002000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
+:10003000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
+:10004000FFFFFFFFFFFFFFFF421A0000FFFFFFFF60
+:10005000EB020000B4180000FFFFFFFF9E1A000033
+:10006000FFFFFFFFC0030000FFFFFFFFFFFFFFFFD9
+:10007000FFFFFFFFAB020000FFFFFFFF7B0300005D
+:10008000FFFFFFFFFFFFFFFF4C0400006E040000B6
+:10009000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF70
+:1000A000FFFFFFFF001800005B180000EE190000C2
+:1000B0004D1B0000E81A0000841B0000001800001F
+:1000C000E3C1DB57F352016AFB52D36AFB521C1A9D
+:1000D000C36AE8621102FF3A3008D0023F7C8F0009
+:1000E0003F00D500017D8D00A005EB5D7804037D08
+:1000F00079041C7D207C7904157CEE566006057D14
+:100100000965337E0A62317E29980A622E7E09656E
+:100110002C7E12051205AD02C86A277F0320004815
+:10012000ED7C419802780962C86A4098150002780F
+:100130000A62C86A40981500150002780B62C86A06
+:10014000147CDF6D127F7F07097DFB52041AC36A9E
+:10015000D36AC862042AC86AFB52D36A0000EB550E
+:10016000004D077DFAC1DB5706980700CC680C6884
+:1001700013C20AC20198D9C1E3C1DB57E35FE35759
+:10018000F352216A8F00D500017D8D00A005EB5D43
+:10019000FB567804037D79042A7D317C7904207C28
+:1001A000700B1103EB53000F6003057D0965377E6B
+:1001B0000A62357E7F980A62327E0965307E1205BA
+:1001C0001205AD026007027D065A8798265A277FDE
+:1001D000011F03200048E87C700B11031353A898FB
+:1001E000150004780962065A0962265AA798150074
+:1001F000150004780A62065A0A62265AA798150062
+:100200001500150004780B62065A0B62265A077C0B
+:100210000000EB55004D067DFAC1E35762980700D8
+:100220000C6813C20AC25F98700B110313536C075A
+:10023000017CD9C1FB5E8A066B07017CD9C1F35EE4
+:10024000DB59D3588F0110010F398B003CC12B7D36
+:10025000C05AC85B4EC1277C88038906E35CFF0D4A
+:100260001105FF1DBC053E07004D187D70081100EB
+:100270007E07097D7D07027D2852DF98F852DB5406
+:10028000BC02CC02097C7C07027D2852E898F85217
+:10029000D354BC02CC02097D0004D6988B00C05216
+:1002A000C85359C1D67D0002C698FF08BF007F071A
+:1002B000157D8804D500017D8D00A005EB5D8F02C2
+:1002C00012021202FF3ADA05027C3E071399A402D9
+:1002D000DD02027D3E0713995E071399EB55004D31
+:1002E000027C9805EB5DF352FB546A07387D6C077E
+:1002F000017D62996B077D7C6907047D6807027D3B
+:10030000010E2A999358D600017D8E009355A005C1
+:10031000935DA0066D07067D6E070B7D0278025582
+:10032000045D3F99150004780255045D2255045D73
+:100330003F99150004780255045D0255245D1D7C2B
+:10034000004E087C6907037D0255177E4999045DBC
+:10035000147F890693500048017D2299D599150094
+:1003600006780255045D4F070255245D2F07017C76
+:10037000D59917006F07017C012093559D00070058
+:10038000DCD9EE986907047D6807027D010E70993B
+:100390009358D600017D8E009355A005935DA0066D
+:1003A0006D07077D6E070D7DD36C02780255C86D11
+:1003B00088991500D36C04780255C86D2255C86D14
+:1003C000889915000578D76C0255C86D0255C86D1F
+:1003D0000F7C004E087C6907037D0255097E9299C7
+:1003E000C86D067F890693500048017D6899D599AC
+:1003F000CF996907047D6807027D010EA79993587C
+:10040000D600017D8E009355A005935DA0066D0773
+:10041000077D6E070D7DC36A0278C865045DBF99CC
+:1004200015000578C76AC865045DC865045DBF9995
+:100430001500C36A0478C865045DC865245D0F7C37
+:10044000004E087C6907037DC865097EC999045D73
+:10045000067F890693500048017D9F99D599935551
+:100460009D000700FF6CDCD9EE980000E354EB55CB
+:10047000004D017CEE98D698E354EB55FF0A11022B
+:10048000FF1A7F07027CA005E9999D008C05BA053B
+:10049000A0051002BA04AD0454040600D9C1E3C19A
+:1004A000DB57F352056A8F00D500017D8D00A00552
+:1004B000FB567804037D7904297D1F7C79042E7C0A
+:1004C000E35D700D1105ED55000F6007027D0652CA
+:1004D0000A9A2652337E6005027D10021202096AD2
+:1004E0002D7F1202096A2A7F1202096A277F011FE3
+:1004F00003200048EA7CE355359A150015001500E5
+:10050000047806520B6A26520B6A349A15001500BD
+:10051000047806520A6A26520A6A349A1500047848
+:100520000652096A2652096A097C286A077F000078
+:10053000DB57004D057DFAC1DB57F39977C25404B0
+:100540000AC2F099E3C1DB57F352056AFB568E02EB
+:10055000941AC36AC8626902267D941EC36ED36E64
+:10056000C862010A1102C86A9426981EC36EC86246
+:100570009826C36E60020F7D981EC36EC8626C021F
+:10058000037D9826C36E819A100A1102D36EC86A41
+:100590009826C36E919AC8626D9A096A187F0125E0
+:1005A000004D1F7D559AE36E8F00D805017D8D00AB
+:1005B000C862096A0C7F01250120FA7CDB57004DD7
+:1005C000107D286A047F0000FAC1DB57469A0700B5
+:1005D00004620C6A8E9A286AFA7F04627AC258040E
+:1005E0005404FF081100FF18BC00CD00017C819A63
+:1005F000286AED7F04627AC20AC2439AD9C1E3C174
+:10060000DB57F352056AFB568E02941A02526902B6
+:100610001D7D941E06524802065A9426981E0652C4
+:100620004C02065A9826981E065260020A7C9826AA
+:1006300006526E02237D096A1D7F0125004D247D2F
+:10064000B39A286A177F04627AC2E49A8F00D805A9
+:10065000017D8D00A00506526E02107D096A0A7F99
+:100660000120F97C286A067F0000004D0D7DFAC14B
+:10067000DB57A39A070004620C6AE19A286AFA7FA2
+:1006800004627AC258045404286AF47F0AC2A09A09
+:100690002CDBDB57F352056AC7698F00D500017D5B
+:1006A0008D00A0057804037D79041C7D157C7904F8
+:1006B0001E7CEE56C862287E6006027D1002120281
+:1006C000096A227F1202096A1F7F1202096A1C7FCF
+:1006D00003200048EF7C1B9B150015000278C862C0
+:1006E0000B6A1A9B15000278C8620A6A1A9B027884
+:1006F000C862096A097C286A077F004D077DD352CA
+:10070000010802580004EC9A77C25404D35201083D
+:100710000258010444DBE99A700B11031353DB5FA9
+:100720000A07D3588B00FB5E3CC1157DC05AC85BDD
+:100730004EC1117C8803F05DFF0D1105FF1DBC0546
+:10074000004D047D439B0807DB5F0A078B00C35203
+:10075000CB5359C1EC7D0002349B016E0B612F7E9F
+:100760000B622D7E0B632B7E0C0D170417041704F0
+:100770009D04081DCC05017C0C0DD16A000F4207B9
+:10078000C86FDD6F1C7F8E009D0001680B67177EB0
+:10079000D56B04080278C86F1207117C0B670F7EB7
+:1007A00004080278C86F12070A7CDD6F087FD169E0
+:1007B000010FC86FDD6F037F01010004599B070023
+:1007C000FF680C680002599BC9DBDB57F352056ACE
+:1007D000FB52C76A8F00D500017D8D00A00578040B
+:1007E000037D79041C7D157C79041E7CEE56C8625D
+:1007F000287E6006027D10021202096A227F120220
+:10080000096A1F7F1202096A1C7F03200048EF7CDF
+:10081000B89B150015000278C8620B6AB79B1500DB
+:100820000278C8620A6AB79B0278C862096A097CC2
+:10083000286A077F004D077DD35201080258000443
+:10084000889B77C25404D352010802580104E1DBAB
+:10085000859B700B11031353DB5F0A07D3588B0082
+:10086000FB5E3CC1157DC05AC85B4EC1117C88033C
+:10087000F05DFF0D1105FF1DBC05004D047DE09BE3
+:100880000807DB5F0A078B00C352CB5359C1EC7DCD
+:040890000002D19BF6
+:00000001FF
diff --git a/firmware/imx/sdma/sdma-imx7d.bin.ihex b/firmware/imx/sdma/sdma-imx7d.bin.ihex
new file mode 100644
index 000000000000..bdfd151e2b0a
--- /dev/null
+++ b/firmware/imx/sdma/sdma-imx7d.bin.ihex
@@ -0,0 +1,169 @@
+:1000000053444D4104000000020000001C000000A9
+:100010002C000000CC000000A809000084020000B1
+:10002000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0
+:10003000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD0
+:10004000FFFFFFFFFFFFFFFF2C1B0000FFFFFFFF75
+:10005000ED02000049190000FFFFFFFF881B0000B0
+:10006000FFFFFFFFC2030000FFFFFFFFFFFFFFFFD7
+:10007000FFFFFFFFAD020000FFFFFFFF7D03000059
+:10008000FFFFFFFFFFFFFFFF4E04000070040000B2
+:10009000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF70
+:1000A000FFFFFFFF00180000F0180000D81A000042
+:1000B000371C0000D21B00006E1C0000001800005E
+:1000C000FFFFFFFF5B180000491A0000E5C1DB5786
+:1000D000F352016AFB52D36AFB521C1AC36AE862EC
+:1000E0001102FF3A3008D0023F7C8F003F00D5005C
+:1000F000017D8D00A005EB5D7804037D79041C7DF6
+:10010000207C7904157CEE566006057D0965337EFA
+:100110000A62317E29980A622E7E09652C7E1205BC
+:100120001205AD02C86A277F03200048ED7C419884
+:1001300002780962C86A4098150002780A62C86AA3
+:1001400040981500150002780B62C86A147CDF6DB8
+:10015000127F7F07097DFB52041AC36AD36AC86203
+:10016000042AC86AFB52D36A0000EB55004D077D94
+:10017000FCC1DB5706980700CC680C6815C20CC29E
+:100180000198E5C1DB57F352016AFB52D36A8F0035
+:10019000FF38E35CD500017D8D00A005EB5D7804A0
+:1001A000037D7904307D487C7904157CEE56600629
+:1001B000057D0965757E0A62737E7C980A62707E91
+:1001C00009656E7E12051205AD02C86A697F0320BB
+:1001D0000048ED7CD098FB52D36A8A04DB578F0627
+:1001E00011070F3F100611060F3E011E17061706D6
+:1001F0000962C86A9E04D36C01270120004FF87C75
+:100200000048E97CCF981500FB52D36A8A04DB577B
+:100210008F0611070F3F100611060F3E011E17062D
+:1002200017060A62C86A9E04D36C01270120004F9A
+:10023000F87C0048E97CCF9815001500FB52D36A82
+:100240008A04DB578F0611070F3F100611060F3E79
+:10025000011E170617060B62C86A9E04D36C01279D
+:100260000120004FF87C0048E97C1A7CDF6D187F84
+:10027000DB5777070C7C10070F3F17071707700E27
+:100280001106700C11049C069F06010C065C000010
+:10029000E354DB57EB55004D077DFCC1DB576198FC
+:1002A0000700CC680C6815C20CC25C98D9C1E5C1C6
+:1002B000DB57E35FE357F352216A8F00D500017DDE
+:1002C0008D00A005EB5DFB567804037D79042A7D43
+:1002D000317C7904207C700B1103EB53000F600319
+:1002E000057D0965377E0A62357E14990A62327E81
+:1002F0000965307E12051205AD026007027C065AC0
+:100300001C99265A277F011F03200048E87C700BA8
+:10031000110313533D99150004780962065A0962C6
+:10032000265A3C991500150004780A62065A0A629A
+:10033000265A3C9915001500150004780B62065AE0
+:100340000B62265A077C0000EB55004D067DFCC170
+:10035000E357F79807000C6815C20CC2F498700BAD
+:10036000110313536C07017CD9C1FB5E8A066B072E
+:10037000017CD9C1F35EDB59D3588F0110010F39CD
+:100380008B003CC12B7DC05AC85B4EC1277C8803C3
+:100390008906E35CFF0D1105FF1DBC053E07004DFE
+:1003A000187D700811007E07097D7D07027D2852A7
+:1003B0007499F852DB54BC02CC02097C7C07027DA4
+:1003C00028527D99F852D354BC02CC02097D000416
+:1003D0006B998B00C052C85359C1D67D00025B99FE
+:1003E000FF08BF007F07157D8804D500017D8D00C3
+:1003F000A005EB5D8F0212021202FF3ADA05027CC1
+:100400003E07A899A402DD02027D3E07A8995E0777
+:10041000A899EB55004D027C9805EB5DF352FB5417
+:100420006A07267D6C07017DE5996B07577C690794
+:10043000047D6807027D010EBF999358D600017DA7
+:100440008E009355A005935DA00602780255045DC9
+:100450001D7C004E087C6907037D0255177ECC99F0
+:10046000045D147F890693500048017DB799309A46
+:10047000150006780255045D4F070255245D2F07CD
+:10048000017C309A17006F07017C012093559D0075
+:10049000070037DA8399D36C6907047D6807027D0A
+:1004A000010EF4999358D600017D8E009355A00556
+:1004B000935DA00602780255C86D0F7C004E087C43
+:1004C0006907037D0255097E019AC86D067F89067A
+:1004D00093500048017DEC99309A2A9AC36A6907C3
+:1004E000047D6807027D010E179A9358D600017D9E
+:1004F0008E009355A005935DA0060278C865045D43
+:100500000F7C004E087C6907037DC865097E249A2C
+:10051000045D067F890693500048017D0F9A309A4A
+:1005200093559D000700FF6C37DA83990000E35470
+:10053000EB55004D017C83996B99E354EB55FF0A11
+:100540001102FF1A7F07027CA005449A9D008C05CA
+:10055000BA05A0051002BA04AD0454040600E5C1B2
+:10056000DB57FB52C36AF352056AE35C8F00FF3826
+:10057000D500017D8D00A0057804037D7904307DD0
+:10058000157C7904467CEE56C862747E6006027D56
+:1005900010021202096A6E7F1202096A6B7F120250
+:1005A000096A687F03200048EF7CBB9A150015009C
+:1005B000FB52C36A8A04DB578F0611070F3F1006F0
+:1005C00011060F3E011E17061706C8620B6A9E042D
+:1005D000C36C01200127004FF87C0048E97CBA9ADF
+:1005E0001500FB52C36A8A04DB578F0611070F3FC1
+:1005F000100611060F3E011E17061706C8620A6A8A
+:100600009E04C36C01200127004FF87C0048E97C60
+:10061000BA9AFB52C36A8A04DB578F0611070F3F51
+:10062000100611060F3E011E17061706C862096A5A
+:100630009E04C36C01200127004FF87C0048E97C30
+:10064000197C286A177FDB5777070C7C10070F3F50
+:1006500017071707700E1106700C11049C069F06F1
+:10066000010C065C0000E354DB57004D057DFCC126
+:10067000DB574F9A79C254040CC24A9AD9C1E5C1DA
+:10068000DB57F352056A8F00D500017D8D00A00570
+:10069000FB567804037D7904297D1F7C79042E7C28
+:1006A000E35D700D1105ED55000F6007027D0652E8
+:1006B000F49A2652337E6005027D10021202096A06
+:1006C0002D7F1202096A2A7F1202096A277F011F01
+:1006D00003200048EA7CE3551F9B15001500150018
+:1006E000047806520B6A26520B6A1E9B15001500F1
+:1006F000047806520A6A26520A6A1E9B150004787C
+:100700000652096A2652096A097C286A077F000096
+:10071000DB57004D057DFCC1DB57DD9A79C25404DF
+:100720000CC2DA9AE5C1DB57F352056AFB568E021A
+:10073000941AC36AC8626902267D941EC36ED36E82
+:10074000C862010A1102C86A9426981EC36EC86264
+:100750009826C36E60020F7D981EC36EC8626C023D
+:10076000037D9826C36E6B9B100A1102D36EC86A74
+:100770009826C36E7B9BC862579B096A187F012528
+:10078000004D1F7D3F9BE36E8F00D805017D8D00DE
+:10079000C862096A0C7F01250120FA7CDB57004DF5
+:1007A000107D286A047F0000FCC1DB57309B0700E6
+:1007B00004620C6A789B286AFA7F04627CC258043F
+:1007C0005404FF081100FF18BC00CD00017C6B9B96
+:1007D000286AED7F04627CC20CC22D9BD9C1E5C1A1
+:1007E000DB57F352056AFB568E02941A02526902D5
+:1007F0001D7D941E06524802065A9426981E0652E3
+:100800004C02065A9826981E065260020A7C9826C8
+:1008100006526E02237D096A1D7F0125004D247D4D
+:100820009D9B286A177F04627CC2CE9B8F00D805EF
+:10083000017D8D00A00506526E02107D096A0A7FB7
+:100840000120F97C286A067F0000004D0D7DFCC167
+:10085000DB578D9B070004620C6ACB9B286AFA7FEA
+:1008600004627CC258045404286AF47F0CC28A9B38
+:1008700016DCDB57F352056AC7698F00D500017D8E
+:100880008D00A0057804037D79041C7D157C790416
+:100890001E7CEE56C862287E6006027D100212029F
+:1008A000096A227F1202096A1F7F1202096A1C7FED
+:1008B00003200048EF7C059C150015000278C862F3
+:1008C0000B6A049C15000278C8620A6A049C0278CC
+:1008D000C862096A097C286A077F004D077DD352E8
+:1008E000010802580004D69B79C25404D35201086F
+:1008F000025801042EDCD39B700B11031353DB5FF2
+:100900000A07D3588B00FB5E3CC1157DC05AC85BFB
+:100910004EC1117C8803F05DFF0D1105FF1DBC0564
+:10092000004D047D2D9C0807DB5F0A078B00C35236
+:10093000CB5359C1EC7D00021E9C016E0B612F7ED2
+:100940000B622D7E0B632B7E0C0D1704170417040E
+:100950009D04081DCC05017C0C0DD16A000F4207D7
+:10096000C86FDD6F1C7F8E009D0001680B67177ECE
+:10097000D56B04080278C86F1207117C0B670F7ED5
+:1009800004080278C86F12070A7CDD6F087FD169FE
+:10099000010FC86FDD6F037F01010004439C070056
+:1009A000FF680C680002439CB3DCDB57F352056A16
+:1009B000FB52C76A8F00D500017D8D00A005780429
+:1009C000037D79041C7D157C79041E7CEE56C8627B
+:1009D000287E6006027D10021202096A227F12023E
+:1009E000096A1F7F1202096A1C7F03200048EF7CFE
+:1009F000A29C150015000278C8620B6AA19C150024
+:100A00000278C8620A6AA19C0278C862096A097CF5
+:100A1000286A077F004D077DD35201080258000461
+:100A2000729C79C25404D352010802580104CBDCF1
+:100A30006F9C700B11031353DB5F0A07D3588B00B5
+:100A4000FB5E3CC1157DC05AC85B4EC1117C88035A
+:100A5000F05DFF0D1105FF1DBC05004D047DCA9C16
+:100A60000807DB5F0A078B00C352CB5359C1EC7DEB
+:040A70000002BB9C29
+:00000001FF
-- 
2.11.0

